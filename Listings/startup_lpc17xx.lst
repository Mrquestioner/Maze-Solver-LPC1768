


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ; * @file:    startup_LPC17xx.s
    3 00000000         ; * @purpose: CMSIS Cortex-M3 Core Device Startup File 
    4 00000000         ; *           for the NXP LPC17xx Device Series 
    5 00000000         ; * @version: V1.01
    6 00000000         ; * @date:    21. December 2009
    7 00000000         ; *------- <<< Use Configuration Wizard in Context Menu 
                       >>> ------------------
    8 00000000         ; *
    9 00000000         ; * Copyright (C) 2009 ARM Limited. All rights reserved.
                       
   10 00000000         ; * ARM Limited (ARM) is supplying this software for use
                        with Cortex-M3 
   11 00000000         ; * processor based microcontrollers.  This file can be 
                       freely distributed 
   12 00000000         ; * within development tools that are supporting such AR
                       M based processors. 
   13 00000000         ; *
   14 00000000         ; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, W
                       HETHER EXPRESS, IMPLIED
   15 00000000         ; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED
                        WARRANTIES OF
   16 00000000         ; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
                        APPLY TO THIS SOFTWARE.
   17 00000000         ; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR S
                       PECIAL, INCIDENTAL, OR
   18 00000000         ; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   19 00000000         ; *
   20 00000000         ; ******************************************************
                       ***********************/
   21 00000000         
   22 00000000         
   23 00000000         ; <h> Stack Configuration
   24 00000000         ;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   25 00000000         ; </h>
   26 00000000         
   27 00000000 00000400 
                       Stack_Size
                               EQU              0x00000400
   28 00000000         
   29 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   30 00000000         Stack_Mem
                               SPACE            Stack_Size
   31 00000400         __initial_sp
   32 00000400         
   33 00000400         
   34 00000400         ; <h> Heap Configuration
   35 00000400         ;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000400         ; </h>
   37 00000400         
   38 00000400 00000000 
                       Heap_Size
                               EQU              0x00000000
   39 00000400         
   40 00000400                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   41 00000000         __heap_base



ARM Macro Assembler    Page 2 


   42 00000000         Heap_Mem
                               SPACE            Heap_Size
   43 00000000         __heap_limit
   44 00000000         
   45 00000000         
   46 00000000                 PRESERVE8
   47 00000000                 THUMB
   48 00000000         
   49 00000000         
   50 00000000         ; Vector Table Mapped to Address 0 at Reset
   51 00000000         
   52 00000000                 AREA             RESET, DATA, READONLY
   53 00000000                 EXPORT           __Vectors
   54 00000000         
   55 00000000 00000000 
                       __Vectors
                               DCD              __initial_sp ; Top of Stack
   56 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   57 00000008 00000000        DCD              NMI_Handler ; NMI Handler
   58 0000000C 00000000        DCD              HardFault_Handler ; Hard Fault 
                                                            Handler
   59 00000010 00000000        DCD              MemManage_Handler 
                                                            ; MPU Fault Handler
                                                            
   60 00000014 00000000        DCD              BusFault_Handler 
                                                            ; Bus Fault Handler
                                                            
   61 00000018 00000000        DCD              UsageFault_Handler ; Usage Faul
                                                            t Handler
   62 0000001C 00000000        DCD              0           ; Reserved
   63 00000020 00000000        DCD              0           ; Reserved
   64 00000024 00000000        DCD              0           ; Reserved
   65 00000028 00000000        DCD              0           ; Reserved
   66 0000002C 00000000        DCD              SVC_Handler ; SVCall Handler
   67 00000030 00000000        DCD              DebugMon_Handler ; Debug Monito
                                                            r Handler
   68 00000034 00000000        DCD              0           ; Reserved
   69 00000038 00000000        DCD              PendSV_Handler ; PendSV Handler
                                                            
   70 0000003C 00000000        DCD              SysTick_Handler 
                                                            ; SysTick Handler
   71 00000040         
   72 00000040         ; External Interrupts
   73 00000040 00000000        DCD              WDT_IRQHandler ; 16: Watchdog T
                                                            imer
   74 00000044 00000000        DCD              TIMER0_IRQHandler ; 17: Timer0
   75 00000048 00000000        DCD              TIMER1_IRQHandler ; 18: Timer1
   76 0000004C 00000000        DCD              TIMER2_IRQHandler ; 19: Timer2
   77 00000050 00000000        DCD              TIMER3_IRQHandler ; 20: Timer3
   78 00000054 00000000        DCD              UART0_IRQHandler ; 21: UART0
   79 00000058 00000000        DCD              UART1_IRQHandler ; 22: UART1
   80 0000005C 00000000        DCD              UART2_IRQHandler ; 23: UART2
   81 00000060 00000000        DCD              UART3_IRQHandler ; 24: UART3
   82 00000064 00000000        DCD              PWM1_IRQHandler ; 25: PWM1
   83 00000068 00000000        DCD              I2C0_IRQHandler ; 26: I2C0
   84 0000006C 00000000        DCD              I2C1_IRQHandler ; 27: I2C1
   85 00000070 00000000        DCD              I2C2_IRQHandler ; 28: I2C2
   86 00000074 00000000        DCD              SPI_IRQHandler ; 29: SPI
   87 00000078 00000000        DCD              SSP0_IRQHandler ; 30: SSP0



ARM Macro Assembler    Page 3 


   88 0000007C 00000000        DCD              SSP1_IRQHandler ; 31: SSP1
   89 00000080 00000000        DCD              PLL0_IRQHandler ; 32: PLL0 Lock
                                                             (Main PLL)
   90 00000084 00000000        DCD              RTC_IRQHandler ; 33: Real Time 
                                                            Clock
   91 00000088 00000000        DCD              EINT0_IRQHandler ; 34: External
                                                             Interrupt 0
   92 0000008C 00000000        DCD              EINT1_IRQHandler ; 35: External
                                                             Interrupt 1
   93 00000090 00000000        DCD              EINT2_IRQHandler ; 36: External
                                                             Interrupt 2
   94 00000094 00000000        DCD              EINT3_IRQHandler ; 37: External
                                                             Interrupt 3
   95 00000098 00000000        DCD              ADC_IRQHandler 
                                                            ; 38: A/D Converter
                                                            
   96 0000009C 00000000        DCD              BOD_IRQHandler ; 39: Brown-Out 
                                                            Detect
   97 000000A0 00000000        DCD              USB_IRQHandler ; 40: USB
   98 000000A4 00000000        DCD              CAN_IRQHandler ; 41: CAN
   99 000000A8 00000000        DCD              DMA_IRQHandler ; 42: General Pu
                                                            rpose DMA
  100 000000AC 00000000        DCD              I2S_IRQHandler ; 43: I2S
  101 000000B0 00000000        DCD              ENET_IRQHandler ; 44: Ethernet
  102 000000B4 00000000        DCD              RIT_IRQHandler ; 45: Repetitive
                                                             Interrupt Timer
  103 000000B8 00000000        DCD              MCPWM_IRQHandler ; 46: Motor Co
                                                            ntrol PWM
  104 000000BC 00000000        DCD              QEI_IRQHandler ; 47: Quadrature
                                                             Encoder Interface
  105 000000C0 00000000        DCD              PLL1_IRQHandler ; 48: PLL1 Lock
                                                             (USB PLL)
  106 000000C4 00000000        DCD              USBActivity_IRQHandler ; USB Ac
                                                            tivity interrupt to
                                                             wakeup
  107 000000C8 00000000        DCD              CANActivity_IRQHandler ; CAN Ac
                                                            tivity interrupt to
                                                             wakeup
  108 000000CC         
  109 000000CC         
  110 000000CC                 IF               :LNOT::DEF:NO_CRP
  111 000000CC                 AREA             |.ARM.__at_0x02FC|, CODE, READO
NLY
  112 00000000 FFFFFFFF 
                       CRP_Key DCD              0xFFFFFFFF
  113 00000004                 ENDIF
  114 00000004         
  115 00000004         
  116 00000004         
  117 00000004         ;NUM_ROW EQU 9          ; Number of rows in the maze
  118 00000004         ;NUM_COL EQU 9          ; Number of columns in the maze
  119 00000004         
  120 00000004         ; Define the initial maze
  121 00000004                 AREA             initialMap, DATA, READONLY
  122 00000000 2A 6E 2A 
              2A 2A 2A 
              2A 2A 2A maze    DCB              "*", "n", "*", "*", "*", "*", "
*", "*", "*"
  123 00000009 2A 20 20 



ARM Macro Assembler    Page 4 


              20 2A 20 
              2A 20 2A         DCB              "*", " ", " ", " ", "*", " ", "
*", " ", "*"
  124 00000012 2A 20 2A 
              2A 2A 2A 
              2A 20 2A         DCB              "*", " ", "*", "*", "*", "*", "
*", " ", "*"
  125 0000001B 2A 20 2A 
              20 2A 20 
              20 20 2A         DCB              "*", " ", "*", " ", "*", " ", "
 ", " ", "*"
  126 00000024 2A 20 2A 
              20 2A 2A 
              2A 20 2A         DCB              "*", " ", "*", " ", "*", "*", "
*", " ", "*"
  127 0000002D 2A 20 20 
              20 2A 20 
              20 20 2A         DCB              "*", " ", " ", " ", "*", " ", "
 ", " ", "*"
  128 00000036 2A 2A 2A 
              2A 2A 20 
              2A 20 2A         DCB              "*", "*", "*", "*", "*", " ", "
*", " ", "*"
  129 0000003F 2A 20 20 
              20 20 20 
              2A 20 2A         DCB              "*", " ", " ", " ", " ", " ", "
*", " ", "*"
  130 00000048 2A 2A 2A 
              2A 2A 2A 
              2A 73 2A         DCB              "*", "*", "*", "*", "*", "*", "
*", "s", "*"
  131 00000051         
  132 00000051         ; Define writable area for maze directions
  133 00000051         ;  AREA currentMap, DATA, READWRITE
  134 00000051         ;maze_directions SPACE NUM_ROW * NUM_COL  ; Space for th
                       e output maze
  135 00000051         
  136 00000051                 AREA             |.text|, CODE, READONLY
  137 00000000         
  138 00000000         Reset_Handler
                               PROC
  139 00000000                 EXPORT           Reset_Handler             [WEAK
]
  140 00000000                 IMPORT           SystemInit
  141 00000000                 IMPORT           __main
  142 00000000 4870            LDR              R0, =SystemInit
  143 00000002 4780            BLX              R0
  144 00000004 4870            LDR              R0, =__main
  145 00000006 4700            BX               R0
  146 00000008         
  147 00000008         ;; Copy the initial maze into the maze_directions
  148 00000008         ;                LDR R0, =maze                   ; Sourc
                       e address (initial maze)
  149 00000008         ;                LDR R1, =maze_directions        ; Desti
                       nation address (maze directions)
  150 00000008         ;                MOV R2, #NUM_ROW * NUM_COL      ; Numbe
                       r of bytes to copy
  151 00000008         ;loopCopyData    LDRB R3, [R0], #1               ; Load 
                       byte from source and increment



ARM Macro Assembler    Page 5 


  152 00000008         ;                STRB R3, [R1], #1               ; Store
                        byte to destination and increment
  153 00000008         ;                SUBS R2, R2, #1                 ; Decre
                       ment counter
  154 00000008         ;                BNE loopCopyData                ; Repea
                       t until all bytes are copied
  155 00000008         
  156 00000008         ;                ; Call mazeSolver
  157 00000008         ;                MOV R0, #NUM_ROW                ; Numbe
                       r of rows
  158 00000008         ;                MOV R1, #NUM_COL                ; Numbe
                       r of columns
  159 00000008         ;                LDR R2, =maze_directions        ; Addre
                       ss of the maze
  160 00000008         ;                BL mazeSolver                   ; Call 
                       mazeSolver
  161 00000008         
  162 00000008 E7FE    stop    B                stop        ; Infinite loop aft
                                                            er execution
  163 0000000A                 ENDP
  164 0000000A         
  165 0000000A         Change_case
                               PROC
  166 0000000A                 EXPORT           Change_case ; Make the subrouti
                                                            ne callable from C
  167 0000000A         
  168 0000000A         ; Save callee-saved registers and link register
  169 0000000A E92D 5FF0       PUSH             {R4-R12, LR}
  170 0000000E         
  171 0000000E         ; Parameters:
  172 0000000E         ; R0 = C_NUM_ROWS (number of rows)
  173 0000000E         ; R1 = C_NUM_COLUMNS (number of columns)
  174 0000000E         ; R2 = Address of the maze matrix (&mymatrix)
  175 0000000E         ; R3 = Address of iteration (pointer to store iteration 
                       count)
  176 0000000E         
  177 0000000E F04F 0C00       MOV              R12, #0     ; Initialize index 
                                                            counter to 0
  178 00000012 FB01 FB00       MUL              R11 , R1, R0 ; Calculate total 
                                                            number of cells in 
                                                            the maze (rows * co
                                                            lumns)
  179 00000016 F8D3 9000       LDR              R9, [R3]    ; Load current iter
                                                            ation count
  180 0000001A F04F 0702       MOV              R7, #2      ; Load value 2 for 
                                                            division
  181 0000001E FBB9 F8F7       UDIV             R8, R9, R7  ; Divide iteration 
                                                            count by 2 (check i
                                                            f even or odd)
  182 00000022 FB08 F807       MUL              R8, R7      ; Multiply back to 
                                                            check divisibility
  183 00000026 EBA9 0808       SUB              R8, R9, R8  ; R8 = R9 % 2 (rema
                                                            inder)
  184 0000002A F1B8 0F00       CMP              R8, #0      ; Check if remainde
                                                            r is 0 (even number
                                                            )
  185 0000002E D000            BEQ              EVEN        ; If even, convert 
                                                            lowercase to upperc
                                                            ase



ARM Macro Assembler    Page 6 


  186 00000030 D1FE            BNE              ODD         ; If odd, convert u
                                                            ppercase to lowerca
                                                            se
  187 00000032         
  188 00000032         ;-------------------------------------------------------
                       -----------------------
  189 00000032         ; Convert lowercase exits (n, e, s, w) to uppercase (N, 
                       E, S, W)
  190 00000032         ;-------------------------------------------------------
                       -----------------------
  191 00000032         EVEN
  192 00000032         E_Next_index
  193 00000032 F812 400C       LDRB             R4, [R2 , R12] ; Load the chara
                                                            cter at index R12
  194 00000036         
  195 00000036 2C20            CMP              R4 , #' '   ; If empty space, s
                                                            kip
  196 00000038 D019            BEQ              E_SKIP
  197 0000003A 2C2A            CMP              R4 , #'*'   ; If wall, skip
  198 0000003C D017            BEQ              E_SKIP
  199 0000003E         
  200 0000003E         Check_n
  201 0000003E F04F 056E       MOV              R5, #'n'    ; Check for 'n'
  202 00000042 42AC            CMP              R4, R5
  203 00000044 D101            BNE              Check_e
  204 00000046 F7FF FFFE       BL               Uppercase   ; Convert to upperc
                                                            ase and return
  205 0000004A         
  206 0000004A         Check_e
  207 0000004A F04F 0565       MOV              R5, #'e'    ; Check for 'e'
  208 0000004E 42AC            CMP              R4, R5
  209 00000050 D101            BNE              Check_s
  210 00000052 F7FF FFFE       BL               Uppercase
  211 00000056         
  212 00000056         Check_s
  213 00000056 F04F 0573       MOV              R5, #'s'    ; Check for 's'
  214 0000005A 42AC            CMP              R4, R5
  215 0000005C D101            BNE              Check_w
  216 0000005E F7FF FFFE       BL               Uppercase
  217 00000062         
  218 00000062         Check_w
  219 00000062 F04F 0577       MOV              R5, #'w'    ; Check for 'w'
  220 00000066 42AC            CMP              R4, R5
  221 00000068 D101            BNE              E_SKIP
  222 0000006A F7FF FFFE       BL               Uppercase
  223 0000006E         
  224 0000006E         E_SKIP
  225 0000006E F10C 0C01       ADD              R12, #1     ; Move to the next 
                                                            cell
  226 00000072 45DC            CMP              R12, R11    ; Check if all cell
                                                            s have been process
                                                            ed
  227 00000074 D1DD            BNE              E_Next_index ; Continue the loo
                                                            p if cells remain
  228 00000076 F109 0901       ADD              R9, #1      ; Increment iterati
                                                            on count
  229 0000007A F8C3 9000       STR              R9, [R3]    ; Store updated ite
                                                            ration count
  230 0000007E E8BD 9FF0       POP              {R4-R12, PC} ; Restore register



ARM Macro Assembler    Page 7 


                                                            s and return
  231 00000082                 ENDP
  232 00000082         
  233 00000082         ;-------------------------------------------------------
                       -----------------------
  234 00000082         ; Convert uppercase exits (N, E, S, W) to lowercase (n, 
                       e, s, w)
  235 00000082         ;-------------------------------------------------------
                       -----------------------
  236 00000082         ODD     PROC
  237 00000082         O_Next_index
  238 00000082 F812 400C       LDRB             R4, [R2 , R12] ; Load the chara
                                                            cter at index R12
  239 00000086         
  240 00000086 2C20            CMP              R4 , #' '   ; If empty space, s
                                                            kip
  241 00000088 D019            BEQ              O_SKIP
  242 0000008A 2C2A            CMP              R4 , #'*'   ; If wall, skip
  243 0000008C D017            BEQ              O_SKIP
  244 0000008E         
  245 0000008E         Check_N
  246 0000008E F04F 054E       MOV              R5, #'N'    ; Check for 'N'
  247 00000092 42AC            CMP              R4, R5
  248 00000094 D101            BNE              Check_E
  249 00000096 F7FF FFFE       BL               Lowercase   ; Convert to lowerc
                                                            ase and return
  250 0000009A         
  251 0000009A         Check_E
  252 0000009A F04F 0545       MOV              R5, #'E'    ; Check for 'E'
  253 0000009E 42AC            CMP              R4, R5
  254 000000A0 D101            BNE              Check_S
  255 000000A2 F7FF FFFE       BL               Lowercase
  256 000000A6         
  257 000000A6         Check_S
  258 000000A6 F04F 0553       MOV              R5, #'S'    ; Check for 'S'
  259 000000AA 42AC            CMP              R4, R5
  260 000000AC D101            BNE              Check_W
  261 000000AE F7FF FFFE       BL               Lowercase
  262 000000B2         
  263 000000B2         Check_W
  264 000000B2 F04F 0557       MOV              R5, #'W'    ; Check for 'W'
  265 000000B6 42AC            CMP              R4, R5
  266 000000B8 D101            BNE              O_SKIP
  267 000000BA F7FF FFFE       BL               Lowercase
  268 000000BE         
  269 000000BE         O_SKIP
  270 000000BE F10C 0C01       ADD              R12, #1     ; Move to the next 
                                                            cell
  271 000000C2 45DC            CMP              R12, R11    ; Check if all cell
                                                            s have been process
                                                            ed
  272 000000C4 D1DD            BNE              O_Next_index ; Continue the loo
                                                            p if cells remain
  273 000000C6 F109 0901       ADD              R9, #1      ; Increment iterati
                                                            on count
  274 000000CA F8C3 9000       STR              R9, [R3]    ; Store updated ite
                                                            ration count
  275 000000CE E8BD 9FF0       POP              {R4-R12, PC} ; Restore register
                                                            s and return



ARM Macro Assembler    Page 8 


  276 000000D2                 ENDP
  277 000000D2         
  278 000000D2         ;-------------------------------------------------------
                       -----------------------
  279 000000D2         ; Subroutine to convert lowercase character to uppercase
                       
  280 000000D2         ;-------------------------------------------------------
                       -----------------------
  281 000000D2         Uppercase
                               PROC
  282 000000D2 F1A5 0520       SUB              R5, #32     ; Convert lowercase
                                                             to uppercase (ASCI
                                                            I offset)
  283 000000D6 F802 500C       STRB             R5, [R2, R12] ; Store updated v
                                                            alue in maze matrix
                                                            
  284 000000DA 4770            BX               LR          ; Return from funct
                                                            ion
  285 000000DC                 ENDP
  286 000000DC         
  287 000000DC         ;-------------------------------------------------------
                       -----------------------
  288 000000DC         ; Subroutine to convert uppercase character to lowercase
                       
  289 000000DC         ;-------------------------------------------------------
                       -----------------------
  290 000000DC         Lowercase
                               PROC
  291 000000DC F105 0520       ADD              R5, #32     ; Convert uppercase
                                                             to lowercase (ASCI
                                                            I offset)
  292 000000E0 F802 500C       STRB             R5, [R2, R12] ; Store updated v
                                                            alue in maze matrix
                                                            
  293 000000E4 4770            BX               LR          ; Return from funct
                                                            ion
  294 000000E6                 ENDP
  295 000000E6         
  296 000000E6         
  297 000000E6         
  298 000000E6         
  299 000000E6         
  300 000000E6         
  301 000000E6         
  302 000000E6         mazeSolver
                               PROC
  303 000000E6                 EXPORT           mazeSolver  ; Make the subrouti
                                                            ne callable from C
  304 000000E6         
  305 000000E6         ; Save callee-saved registers and link register
  306 000000E6 E92D 4FF0       PUSH             {R4-R11, LR}
  307 000000EA         
  308 000000EA         ; Parameters:
  309 000000EA         ; R0 = C_NUM_ROWS (number of rows)
  310 000000EA         ; R1 = C_NUM_COLUMNS (number of columns)
  311 000000EA         ; R2 = Address of the maze matrix (&mymatrix)
  312 000000EA         ; R3 = Address of iteration (pointer to store iteration 
                       count)
  313 000000EA         



ARM Macro Assembler    Page 9 


  314 000000EA         ; Initialize iteration counter and update flag
  315 000000EA F04F 0900       MOV              R9, #0      ; Iteration counter
                                                             (R9), starts at 0
  316 000000EE F04F 0C01       MOV              R12, #1     ; Update flag (1 = 
                                                            changes made, 0 = n
                                                            o changes)
  317 000000F2 FB01 FB00       MUL              R11 , R1, R0 ; Calculate total 
                                                            number of cells in 
                                                            the maze (rows * co
                                                            lumns)
  318 000000F6         
  319 000000F6         
  320 000000F6         main_loop
  321 000000F6 F1BC 0F00       CMP              R12, #0     ; Check if any upda
                                                            tes were made in th
                                                            e last pass
  322 000000FA D016            BEQ              exit_solver ; Exit the solver i
                                                            f no updates
  323 000000FC         
  324 000000FC F04F 0C00       MOV              R12, #0     ; Reset update flag
                                                            
  325 00000100 F04F 0A00       MOV              R10, #0     ; Start processing 
                                                            from the first cell
                                                             (index 0)
  326 00000104         
  327 00000104         phase_1_loop
  328 00000104         ; Check if the current cell is a space (' ')
  329 00000104 F812 400A       LDRB             R4, [R2, R10] ; Load the curren
                                                            t cell from the maz
                                                            e
  330 00000108 2C20            CMP              R4, #' '    ; Compare with ASCI
                                                            I space (' ')
  331 0000010A D107            BNE              phase_1_next_cell ; Skip if the
                                                             cell is not a spac
                                                            e
  332 0000010C         
  333 0000010C         ; Check and update neighbors in priority order
  334 0000010C F7FF FFFE       BL               TopNeighbourCheck ; Check the t
                                                            op neighbor
  335 00000110 F7FF FFFE       BL               RightNeighbourCheck ; Check the
                                                             right neighbor
  336 00000114 F7FF FFFE       BL               BotNeighbourCheck ; Check the b
                                                            ottom neighbor
  337 00000118 F7FF FFFE       BL               LeftNeighbourCheck ; Check the 
                                                            left neighbor
  338 0000011C         
  339 0000011C         phase_1_next_cell
  340 0000011C F10A 0A01       ADD              R10, #1     ; Move to the next 
                                                            cell
  341 00000120 45DA            CMP              R10, R11    ; Check if all cell
                                                            s have been process
                                                            ed
  342 00000122 D1EF            BNE              phase_1_loop ; Continue the loo
                                                            p if cells remain
  343 00000124         
  344 00000124         increment_counter
  345 00000124 F109 0901       ADD              R9, R9, #1  ; Increment the ite
                                                            ration counter
  346 00000128 E7E5            B                main_loop   ; Continue the main



ARM Macro Assembler    Page 10 


                                                             loop
  347 0000012A         
  348 0000012A         exit_solver
  349 0000012A         ; Store the iteration counter at the address pointed to 
                       by R3
  350 0000012A F883 9000       STRB             R9, [R3]
  351 0000012E         ; Restore saved registers and return
  352 0000012E E8BD 8FF0       POP              {R4-R11, PC}
  353 00000132                 ENDP
  354 00000132         
  355 00000132         ; Top neighbor checking subroutine
  356 00000132         TopNeighbourCheck
                               PROC
  357 00000132 EBAA 0601       SUB              R6, R10, R1 ; Calculate the ind
                                                            ex of the top neigh
                                                            bor
  358 00000136 2E00            CMP              R6, #0      ; Check if the inde
                                                            x is out of bounds
  359 00000138 DB08            BLT              top_end     ; Skip if out of bo
                                                            unds
  360 0000013A 5D94            LDRB             R4, [R2, R6] ; Load the value o
                                                            f the top neighbor
  361 0000013C 2C61            CMP              R4, #'a'    ; Check if the neig
                                                            hbor is a valid dir
                                                            ection
  362 0000013E DB05            BLT              top_end     ; Skip if the neigh
                                                            bor is not valid
  363 00000140 F04F 056E       MOV              R5, #'n'    ; Update the curren
                                                            t cell to 'N' (Nort
                                                            h)
  364 00000144 F802 500A       STRB             R5, [R2, R10] ; Store the updat
                                                            ed value in the maz
                                                            e
  365 00000148 F04F 0C01       MOV              R12, #1     ; Mark as updated
  366 0000014C         top_end
  367 0000014C 4770            BX               LR          ; Return from the s
                                                            ubroutine
  368 0000014E                 ENDP
  369 0000014E         
  370 0000014E         ; Right neighbor checking subroutine
  371 0000014E         RightNeighbourCheck
                               PROC
  372 0000014E F10A 0601       ADD              R6, R10, #1 ; Calculate the ind
                                                            ex of the right nei
                                                            ghbor
  373 00000152 455E            CMP              R6, R11     ; Check if the inde
                                                            x is out of bounds
  374 00000154 D208            BHS              right_end   ; Skip if out of bo
                                                            unds
  375 00000156 5D94            LDRB             R4, [R2, R6] ; Load the value o
                                                            f the right neighbo
                                                            r
  376 00000158 2C61            CMP              R4, #'a'    ; Check if the neig
                                                            hbor is a valid dir
                                                            ection
  377 0000015A DB05            BLT              right_end   ; Skip if the neigh
                                                            bor is not valid
  378 0000015C F04F 0565       MOV              R5, #'e'    ; Update the curren
                                                            t cell to 'E' (East



ARM Macro Assembler    Page 11 


                                                            )
  379 00000160 F802 500A       STRB             R5, [R2, R10] ; Store the updat
                                                            ed value in the maz
                                                            e
  380 00000164 F04F 0C01       MOV              R12, #1     ; Mark as updated
  381 00000168         right_end
  382 00000168 4770            BX               LR          ; Return from the s
                                                            ubroutine
  383 0000016A                 ENDP
  384 0000016A         
  385 0000016A         ; Bottom neighbor checking subroutine
  386 0000016A         BotNeighbourCheck
                               PROC
  387 0000016A EB0A 0601       ADD              R6, R10, R1 ; Calculate the ind
                                                            ex of the bottom ne
                                                            ighbor
  388 0000016E 455E            CMP              R6, R11     ; Check if the inde
                                                            x is out of bounds
  389 00000170 D208            BHS              bot_end     ; Skip if out of bo
                                                            unds
  390 00000172 5D94            LDRB             R4, [R2, R6] ; Load the value o
                                                            f the bottom neighb
                                                            or
  391 00000174 2C61            CMP              R4, #'a'    ; Check if the neig
                                                            hbor is a valid dir
                                                            ection
  392 00000176 DB05            BLT              bot_end     ; Skip if the neigh
                                                            bor is not valid
  393 00000178 F04F 0573       MOV              R5, #'s'    ; Update the curren
                                                            t cell to 'S' (Sout
                                                            h)
  394 0000017C F802 500A       STRB             R5, [R2, R10] ; Store the updat
                                                            ed value in the maz
                                                            e
  395 00000180 F04F 0C01       MOV              R12, #1     ; Mark as updated
  396 00000184         bot_end
  397 00000184 4770            BX               LR          ; Return from the s
                                                            ubroutine
  398 00000186                 ENDP
  399 00000186         
  400 00000186         ; Left neighbor checking subroutine
  401 00000186         LeftNeighbourCheck
                               PROC
  402 00000186 F1AA 0601       SUB              R6, R10, #1 ; Calculate the ind
                                                            ex of the left neig
                                                            hbor
  403 0000018A 2E00            CMP              R6, #0      ; Check if the inde
                                                            x is out of bounds
  404 0000018C DB08            BLT              left_end    ; Skip if out of bo
                                                            unds
  405 0000018E 5D94            LDRB             R4, [R2, R6] ; Load the value o
                                                            f the left neighbor
                                                            
  406 00000190 2C61            CMP              R4, #'a'    ; Check if the neig
                                                            hbor is a valid dir
                                                            ection
  407 00000192 DB05            BLT              left_end    ; Skip if the neigh
                                                            bor is not valid
  408 00000194 F04F 0577       MOV              R5, #'w'    ; Update the curren



ARM Macro Assembler    Page 12 


                                                            t cell to 'W' (West
                                                            )
  409 00000198 F802 500A       STRB             R5, [R2, R10] ; Store the updat
                                                            ed value in the maz
                                                            e
  410 0000019C F04F 0C01       MOV              R12, #1     ; Mark as updated
  411 000001A0         left_end
  412 000001A0 4770            BX               LR          ; Return from the s
                                                            ubroutine
  413 000001A2                 ENDP
  414 000001A2         
  415 000001A2         
  416 000001A2         ; Dummy Exception Handlers (infinite loops which can be 
                       modified)                
  417 000001A2         
  418 000001A2         NMI_Handler
                               PROC
  419 000001A2                 EXPORT           NMI_Handler               [WEAK
]
  420 000001A2 E7FE            B                .
  421 000001A4                 ENDP
  423 000001A4         HardFault_Handler
                               PROC
  424 000001A4                 EXPORT           HardFault_Handler         [WEAK
]
  425 000001A4 E7FE            B                .
  426 000001A6                 ENDP
  428 000001A6         MemManage_Handler
                               PROC
  429 000001A6                 EXPORT           MemManage_Handler         [WEAK
]
  430 000001A6 E7FE            B                .
  431 000001A8                 ENDP
  433 000001A8         BusFault_Handler
                               PROC
  434 000001A8                 EXPORT           BusFault_Handler          [WEAK
]
  435 000001A8 E7FE            B                .
  436 000001AA                 ENDP
  438 000001AA         UsageFault_Handler
                               PROC
  439 000001AA                 EXPORT           UsageFault_Handler        [WEAK
]
  440 000001AA E7FE            B                .
  441 000001AC                 ENDP
  442 000001AC         SVC_Handler
                               PROC
  443 000001AC                 EXPORT           SVC_Handler               [WEAK
]
  444 000001AC E7FE            B                .
  445 000001AE                 ENDP
  447 000001AE         DebugMon_Handler
                               PROC
  448 000001AE                 EXPORT           DebugMon_Handler          [WEAK
]
  449 000001AE E7FE            B                .
  450 000001B0                 ENDP
  451 000001B0         PendSV_Handler
                               PROC



ARM Macro Assembler    Page 13 


  452 000001B0                 EXPORT           PendSV_Handler            [WEAK
]
  453 000001B0 E7FE            B                .
  454 000001B2                 ENDP
  455 000001B2         SysTick_Handler
                               PROC
  456 000001B2                 EXPORT           SysTick_Handler           [WEAK
]
  457 000001B2 E7FE            B                .
  458 000001B4                 ENDP
  459 000001B4         
  460 000001B4         Default_Handler
                               PROC
  461 000001B4         
  462 000001B4                 EXPORT           WDT_IRQHandler            [WEAK
]
  463 000001B4                 EXPORT           TIMER0_IRQHandler         [WEAK
]
  464 000001B4                 EXPORT           TIMER1_IRQHandler         [WEAK
]
  465 000001B4                 EXPORT           TIMER2_IRQHandler         [WEAK
]
  466 000001B4                 EXPORT           TIMER3_IRQHandler         [WEAK
]
  467 000001B4                 EXPORT           UART0_IRQHandler          [WEAK
]
  468 000001B4                 EXPORT           UART1_IRQHandler          [WEAK
]
  469 000001B4                 EXPORT           UART2_IRQHandler          [WEAK
]
  470 000001B4                 EXPORT           UART3_IRQHandler          [WEAK
]
  471 000001B4                 EXPORT           PWM1_IRQHandler           [WEAK
]
  472 000001B4                 EXPORT           I2C0_IRQHandler           [WEAK
]
  473 000001B4                 EXPORT           I2C1_IRQHandler           [WEAK
]
  474 000001B4                 EXPORT           I2C2_IRQHandler           [WEAK
]
  475 000001B4                 EXPORT           SPI_IRQHandler            [WEAK
]
  476 000001B4                 EXPORT           SSP0_IRQHandler           [WEAK
]
  477 000001B4                 EXPORT           SSP1_IRQHandler           [WEAK
]
  478 000001B4                 EXPORT           PLL0_IRQHandler           [WEAK
]
  479 000001B4                 EXPORT           RTC_IRQHandler            [WEAK
]
  480 000001B4                 EXPORT           EINT0_IRQHandler          [WEAK
]
  481 000001B4                 EXPORT           EINT1_IRQHandler          [WEAK
]
  482 000001B4                 EXPORT           EINT2_IRQHandler          [WEAK
]
  483 000001B4                 EXPORT           EINT3_IRQHandler          [WEAK
]
  484 000001B4                 EXPORT           ADC_IRQHandler            [WEAK



ARM Macro Assembler    Page 14 


]
  485 000001B4                 EXPORT           BOD_IRQHandler            [WEAK
]
  486 000001B4                 EXPORT           USB_IRQHandler            [WEAK
]
  487 000001B4                 EXPORT           CAN_IRQHandler            [WEAK
]
  488 000001B4                 EXPORT           DMA_IRQHandler            [WEAK
]
  489 000001B4                 EXPORT           I2S_IRQHandler            [WEAK
]
  490 000001B4                 EXPORT           ENET_IRQHandler           [WEAK
]
  491 000001B4                 EXPORT           RIT_IRQHandler            [WEAK
]
  492 000001B4                 EXPORT           MCPWM_IRQHandler          [WEAK
]
  493 000001B4                 EXPORT           QEI_IRQHandler            [WEAK
]
  494 000001B4                 EXPORT           PLL1_IRQHandler           [WEAK
]
  495 000001B4                 EXPORT           USBActivity_IRQHandler    [WEAK
]
  496 000001B4                 EXPORT           CANActivity_IRQHandler    [WEAK
]
  497 000001B4         
  498 000001B4         WDT_IRQHandler
  499 000001B4         TIMER0_IRQHandler
  500 000001B4         TIMER1_IRQHandler
  501 000001B4         TIMER2_IRQHandler
  502 000001B4         TIMER3_IRQHandler
  503 000001B4         UART0_IRQHandler
  504 000001B4         UART1_IRQHandler
  505 000001B4         UART2_IRQHandler
  506 000001B4         UART3_IRQHandler
  507 000001B4         PWM1_IRQHandler
  508 000001B4         I2C0_IRQHandler
  509 000001B4         I2C1_IRQHandler
  510 000001B4         I2C2_IRQHandler
  511 000001B4         SPI_IRQHandler
  512 000001B4         SSP0_IRQHandler
  513 000001B4         SSP1_IRQHandler
  514 000001B4         PLL0_IRQHandler
  515 000001B4         RTC_IRQHandler
  516 000001B4         EINT0_IRQHandler
  517 000001B4         EINT1_IRQHandler
  518 000001B4         EINT2_IRQHandler
  519 000001B4         EINT3_IRQHandler
  520 000001B4         ADC_IRQHandler
  521 000001B4         BOD_IRQHandler
  522 000001B4         USB_IRQHandler
  523 000001B4         CAN_IRQHandler
  524 000001B4         DMA_IRQHandler
  525 000001B4         I2S_IRQHandler
  526 000001B4         ENET_IRQHandler
  527 000001B4         RIT_IRQHandler
  528 000001B4         MCPWM_IRQHandler
  529 000001B4         QEI_IRQHandler
  530 000001B4         PLL1_IRQHandler



ARM Macro Assembler    Page 15 


  531 000001B4         USBActivity_IRQHandler
  532 000001B4         CANActivity_IRQHandler
  533 000001B4         
  534 000001B4 E7FE            B                .
  535 000001B6         
  536 000001B6                 ENDP
  537 000001B6         
  538 000001B6         
  539 000001B6 00 00           ALIGN
  540 000001B8         
  541 000001B8         
  542 000001B8         ; User Initial Stack & Heap
  543 000001B8         
  544 000001B8                 IF               :DEF:__MICROLIB
  551 000001B8         
  552 000001B8                 IMPORT           __use_two_region_memory
  553 000001B8                 EXPORT           __user_initial_stackheap
  554 000001B8         __user_initial_stackheap
  555 000001B8         
  556 000001B8 4804            LDR              R0, =  Heap_Mem
  557 000001BA 4905            LDR              R1, =(Stack_Mem + Stack_Size)
  558 000001BC 4A03            LDR              R2, = (Heap_Mem +  Heap_Size)
  559 000001BE 4B05            LDR              R3, = Stack_Mem
  560 000001C0 4770            BX               LR
  561 000001C2         
  562 000001C2 00 00           ALIGN
  563 000001C4         
  564 000001C4                 ENDIF
  565 000001C4         
  566 000001C4         
  567 000001C4                 END
              00000000 
              00000000 
              00000000 
              00000400 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M3 --depe
nd=.\objects\startup_lpc17xx.d -o.\objects\startup_lpc17xx.o -I.\Source -I.\Sou
rce\CMSIS_core -I.\Source\GLCD -I.\Source\timer -I.\Source\button_EXINT -I.\Sou
rce\TouchPanel -I.\RTE\_LandTiger_LPC1768__release_ -IC:\Users\PRECISION\AppDat
a\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -IC:\Users\PRECISION\AppDa
ta\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.1\Device\Include --predefine="__EVAL SE
TA 1" --predefine="__UVISION_VERSION SETA 541" --predefine="LPC175x_6x SETA 1" 
--predefine="_RTE_ SETA 1" --list=.\listings\startup_lpc17xx.lst Source\startup
_LPC17xx.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 29 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 30 in file Source\startup_LPC17xx.s
   Uses
      At line 557 in file Source\startup_LPC17xx.s
      At line 559 in file Source\startup_LPC17xx.s

__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 31 in file Source\startup_LPC17xx.s
   Uses
      At line 55 in file Source\startup_LPC17xx.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 40 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: HEAP unused
Heap_Mem 00000000

Symbol: Heap_Mem
   Definitions
      At line 42 in file Source\startup_LPC17xx.s
   Uses
      At line 556 in file Source\startup_LPC17xx.s
      At line 558 in file Source\startup_LPC17xx.s

__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 41 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: __heap_base unused
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 43 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: __heap_limit unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 52 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 55 in file Source\startup_LPC17xx.s
   Uses
      At line 53 in file Source\startup_LPC17xx.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x02FC 00000000

Symbol: .ARM.__at_0x02FC
   Definitions
      At line 111 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: .ARM.__at_0x02FC unused
CRP_Key 00000000

Symbol: CRP_Key
   Definitions
      At line 112 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: CRP_Key unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

initialMap 00000000

Symbol: initialMap
   Definitions
      At line 121 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: initialMap unused
maze 00000000

Symbol: maze
   Definitions
      At line 122 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: maze unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 136 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: .text unused
ADC_IRQHandler 000001B4

Symbol: ADC_IRQHandler
   Definitions
      At line 520 in file Source\startup_LPC17xx.s
   Uses
      At line 95 in file Source\startup_LPC17xx.s
      At line 484 in file Source\startup_LPC17xx.s

BOD_IRQHandler 000001B4

Symbol: BOD_IRQHandler
   Definitions
      At line 521 in file Source\startup_LPC17xx.s
   Uses
      At line 96 in file Source\startup_LPC17xx.s
      At line 485 in file Source\startup_LPC17xx.s

BotNeighbourCheck 0000016A

Symbol: BotNeighbourCheck
   Definitions
      At line 386 in file Source\startup_LPC17xx.s
   Uses
      At line 336 in file Source\startup_LPC17xx.s
Comment: BotNeighbourCheck used once
BusFault_Handler 000001A8

Symbol: BusFault_Handler
   Definitions
      At line 433 in file Source\startup_LPC17xx.s
   Uses
      At line 60 in file Source\startup_LPC17xx.s
      At line 434 in file Source\startup_LPC17xx.s

CANActivity_IRQHandler 000001B4

Symbol: CANActivity_IRQHandler
   Definitions
      At line 532 in file Source\startup_LPC17xx.s
   Uses
      At line 107 in file Source\startup_LPC17xx.s
      At line 496 in file Source\startup_LPC17xx.s

CAN_IRQHandler 000001B4

Symbol: CAN_IRQHandler
   Definitions
      At line 523 in file Source\startup_LPC17xx.s
   Uses
      At line 98 in file Source\startup_LPC17xx.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 487 in file Source\startup_LPC17xx.s

Change_case 0000000A

Symbol: Change_case
   Definitions
      At line 165 in file Source\startup_LPC17xx.s
   Uses
      At line 166 in file Source\startup_LPC17xx.s
Comment: Change_case used once
Check_E 0000009A

Symbol: Check_E
   Definitions
      At line 251 in file Source\startup_LPC17xx.s
   Uses
      At line 248 in file Source\startup_LPC17xx.s
Comment: Check_E used once
Check_N 0000008E

Symbol: Check_N
   Definitions
      At line 245 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: Check_N unused
Check_S 000000A6

Symbol: Check_S
   Definitions
      At line 257 in file Source\startup_LPC17xx.s
   Uses
      At line 254 in file Source\startup_LPC17xx.s
Comment: Check_S used once
Check_W 000000B2

Symbol: Check_W
   Definitions
      At line 263 in file Source\startup_LPC17xx.s
   Uses
      At line 260 in file Source\startup_LPC17xx.s
Comment: Check_W used once
Check_e 0000004A

Symbol: Check_e
   Definitions
      At line 206 in file Source\startup_LPC17xx.s
   Uses
      At line 203 in file Source\startup_LPC17xx.s
Comment: Check_e used once
Check_n 0000003E

Symbol: Check_n
   Definitions
      At line 200 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: Check_n unused
Check_s 00000056



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: Check_s
   Definitions
      At line 212 in file Source\startup_LPC17xx.s
   Uses
      At line 209 in file Source\startup_LPC17xx.s
Comment: Check_s used once
Check_w 00000062

Symbol: Check_w
   Definitions
      At line 218 in file Source\startup_LPC17xx.s
   Uses
      At line 215 in file Source\startup_LPC17xx.s
Comment: Check_w used once
DMA_IRQHandler 000001B4

Symbol: DMA_IRQHandler
   Definitions
      At line 524 in file Source\startup_LPC17xx.s
   Uses
      At line 99 in file Source\startup_LPC17xx.s
      At line 488 in file Source\startup_LPC17xx.s

DebugMon_Handler 000001AE

Symbol: DebugMon_Handler
   Definitions
      At line 447 in file Source\startup_LPC17xx.s
   Uses
      At line 67 in file Source\startup_LPC17xx.s
      At line 448 in file Source\startup_LPC17xx.s

Default_Handler 000001B4

Symbol: Default_Handler
   Definitions
      At line 460 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: Default_Handler unused
EINT0_IRQHandler 000001B4

Symbol: EINT0_IRQHandler
   Definitions
      At line 516 in file Source\startup_LPC17xx.s
   Uses
      At line 91 in file Source\startup_LPC17xx.s
      At line 480 in file Source\startup_LPC17xx.s

EINT1_IRQHandler 000001B4

Symbol: EINT1_IRQHandler
   Definitions
      At line 517 in file Source\startup_LPC17xx.s
   Uses
      At line 92 in file Source\startup_LPC17xx.s
      At line 481 in file Source\startup_LPC17xx.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

EINT2_IRQHandler 000001B4

Symbol: EINT2_IRQHandler
   Definitions
      At line 518 in file Source\startup_LPC17xx.s
   Uses
      At line 93 in file Source\startup_LPC17xx.s
      At line 482 in file Source\startup_LPC17xx.s

EINT3_IRQHandler 000001B4

Symbol: EINT3_IRQHandler
   Definitions
      At line 519 in file Source\startup_LPC17xx.s
   Uses
      At line 94 in file Source\startup_LPC17xx.s
      At line 483 in file Source\startup_LPC17xx.s

ENET_IRQHandler 000001B4

Symbol: ENET_IRQHandler
   Definitions
      At line 526 in file Source\startup_LPC17xx.s
   Uses
      At line 101 in file Source\startup_LPC17xx.s
      At line 490 in file Source\startup_LPC17xx.s

EVEN 00000032

Symbol: EVEN
   Definitions
      At line 191 in file Source\startup_LPC17xx.s
   Uses
      At line 185 in file Source\startup_LPC17xx.s
Comment: EVEN used once
E_Next_index 00000032

Symbol: E_Next_index
   Definitions
      At line 192 in file Source\startup_LPC17xx.s
   Uses
      At line 227 in file Source\startup_LPC17xx.s
Comment: E_Next_index used once
E_SKIP 0000006E

Symbol: E_SKIP
   Definitions
      At line 224 in file Source\startup_LPC17xx.s
   Uses
      At line 196 in file Source\startup_LPC17xx.s
      At line 198 in file Source\startup_LPC17xx.s
      At line 221 in file Source\startup_LPC17xx.s

HardFault_Handler 000001A4

Symbol: HardFault_Handler
   Definitions
      At line 423 in file Source\startup_LPC17xx.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 58 in file Source\startup_LPC17xx.s
      At line 424 in file Source\startup_LPC17xx.s

I2C0_IRQHandler 000001B4

Symbol: I2C0_IRQHandler
   Definitions
      At line 508 in file Source\startup_LPC17xx.s
   Uses
      At line 83 in file Source\startup_LPC17xx.s
      At line 472 in file Source\startup_LPC17xx.s

I2C1_IRQHandler 000001B4

Symbol: I2C1_IRQHandler
   Definitions
      At line 509 in file Source\startup_LPC17xx.s
   Uses
      At line 84 in file Source\startup_LPC17xx.s
      At line 473 in file Source\startup_LPC17xx.s

I2C2_IRQHandler 000001B4

Symbol: I2C2_IRQHandler
   Definitions
      At line 510 in file Source\startup_LPC17xx.s
   Uses
      At line 85 in file Source\startup_LPC17xx.s
      At line 474 in file Source\startup_LPC17xx.s

I2S_IRQHandler 000001B4

Symbol: I2S_IRQHandler
   Definitions
      At line 525 in file Source\startup_LPC17xx.s
   Uses
      At line 100 in file Source\startup_LPC17xx.s
      At line 489 in file Source\startup_LPC17xx.s

LeftNeighbourCheck 00000186

Symbol: LeftNeighbourCheck
   Definitions
      At line 401 in file Source\startup_LPC17xx.s
   Uses
      At line 337 in file Source\startup_LPC17xx.s
Comment: LeftNeighbourCheck used once
Lowercase 000000DC

Symbol: Lowercase
   Definitions
      At line 290 in file Source\startup_LPC17xx.s
   Uses
      At line 249 in file Source\startup_LPC17xx.s
      At line 255 in file Source\startup_LPC17xx.s
      At line 261 in file Source\startup_LPC17xx.s
      At line 267 in file Source\startup_LPC17xx.s

MCPWM_IRQHandler 000001B4



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols


Symbol: MCPWM_IRQHandler
   Definitions
      At line 528 in file Source\startup_LPC17xx.s
   Uses
      At line 103 in file Source\startup_LPC17xx.s
      At line 492 in file Source\startup_LPC17xx.s

MemManage_Handler 000001A6

Symbol: MemManage_Handler
   Definitions
      At line 428 in file Source\startup_LPC17xx.s
   Uses
      At line 59 in file Source\startup_LPC17xx.s
      At line 429 in file Source\startup_LPC17xx.s

NMI_Handler 000001A2

Symbol: NMI_Handler
   Definitions
      At line 418 in file Source\startup_LPC17xx.s
   Uses
      At line 57 in file Source\startup_LPC17xx.s
      At line 419 in file Source\startup_LPC17xx.s

ODD 00000082

Symbol: ODD
   Definitions
      At line 236 in file Source\startup_LPC17xx.s
   Uses
      At line 186 in file Source\startup_LPC17xx.s
Comment: ODD used once
O_Next_index 00000082

Symbol: O_Next_index
   Definitions
      At line 237 in file Source\startup_LPC17xx.s
   Uses
      At line 272 in file Source\startup_LPC17xx.s
Comment: O_Next_index used once
O_SKIP 000000BE

Symbol: O_SKIP
   Definitions
      At line 269 in file Source\startup_LPC17xx.s
   Uses
      At line 241 in file Source\startup_LPC17xx.s
      At line 243 in file Source\startup_LPC17xx.s
      At line 266 in file Source\startup_LPC17xx.s

PLL0_IRQHandler 000001B4

Symbol: PLL0_IRQHandler
   Definitions
      At line 514 in file Source\startup_LPC17xx.s
   Uses
      At line 89 in file Source\startup_LPC17xx.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 478 in file Source\startup_LPC17xx.s

PLL1_IRQHandler 000001B4

Symbol: PLL1_IRQHandler
   Definitions
      At line 530 in file Source\startup_LPC17xx.s
   Uses
      At line 105 in file Source\startup_LPC17xx.s
      At line 494 in file Source\startup_LPC17xx.s

PWM1_IRQHandler 000001B4

Symbol: PWM1_IRQHandler
   Definitions
      At line 507 in file Source\startup_LPC17xx.s
   Uses
      At line 82 in file Source\startup_LPC17xx.s
      At line 471 in file Source\startup_LPC17xx.s

PendSV_Handler 000001B0

Symbol: PendSV_Handler
   Definitions
      At line 451 in file Source\startup_LPC17xx.s
   Uses
      At line 69 in file Source\startup_LPC17xx.s
      At line 452 in file Source\startup_LPC17xx.s

QEI_IRQHandler 000001B4

Symbol: QEI_IRQHandler
   Definitions
      At line 529 in file Source\startup_LPC17xx.s
   Uses
      At line 104 in file Source\startup_LPC17xx.s
      At line 493 in file Source\startup_LPC17xx.s

RIT_IRQHandler 000001B4

Symbol: RIT_IRQHandler
   Definitions
      At line 527 in file Source\startup_LPC17xx.s
   Uses
      At line 102 in file Source\startup_LPC17xx.s
      At line 491 in file Source\startup_LPC17xx.s

RTC_IRQHandler 000001B4

Symbol: RTC_IRQHandler
   Definitions
      At line 515 in file Source\startup_LPC17xx.s
   Uses
      At line 90 in file Source\startup_LPC17xx.s
      At line 479 in file Source\startup_LPC17xx.s

Reset_Handler 00000000

Symbol: Reset_Handler



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 138 in file Source\startup_LPC17xx.s
   Uses
      At line 56 in file Source\startup_LPC17xx.s
      At line 139 in file Source\startup_LPC17xx.s

RightNeighbourCheck 0000014E

Symbol: RightNeighbourCheck
   Definitions
      At line 371 in file Source\startup_LPC17xx.s
   Uses
      At line 335 in file Source\startup_LPC17xx.s
Comment: RightNeighbourCheck used once
SPI_IRQHandler 000001B4

Symbol: SPI_IRQHandler
   Definitions
      At line 511 in file Source\startup_LPC17xx.s
   Uses
      At line 86 in file Source\startup_LPC17xx.s
      At line 475 in file Source\startup_LPC17xx.s

SSP0_IRQHandler 000001B4

Symbol: SSP0_IRQHandler
   Definitions
      At line 512 in file Source\startup_LPC17xx.s
   Uses
      At line 87 in file Source\startup_LPC17xx.s
      At line 476 in file Source\startup_LPC17xx.s

SSP1_IRQHandler 000001B4

Symbol: SSP1_IRQHandler
   Definitions
      At line 513 in file Source\startup_LPC17xx.s
   Uses
      At line 88 in file Source\startup_LPC17xx.s
      At line 477 in file Source\startup_LPC17xx.s

SVC_Handler 000001AC

Symbol: SVC_Handler
   Definitions
      At line 442 in file Source\startup_LPC17xx.s
   Uses
      At line 66 in file Source\startup_LPC17xx.s
      At line 443 in file Source\startup_LPC17xx.s

SysTick_Handler 000001B2

Symbol: SysTick_Handler
   Definitions
      At line 455 in file Source\startup_LPC17xx.s
   Uses
      At line 70 in file Source\startup_LPC17xx.s
      At line 456 in file Source\startup_LPC17xx.s




ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

TIMER0_IRQHandler 000001B4

Symbol: TIMER0_IRQHandler
   Definitions
      At line 499 in file Source\startup_LPC17xx.s
   Uses
      At line 74 in file Source\startup_LPC17xx.s
      At line 463 in file Source\startup_LPC17xx.s

TIMER1_IRQHandler 000001B4

Symbol: TIMER1_IRQHandler
   Definitions
      At line 500 in file Source\startup_LPC17xx.s
   Uses
      At line 75 in file Source\startup_LPC17xx.s
      At line 464 in file Source\startup_LPC17xx.s

TIMER2_IRQHandler 000001B4

Symbol: TIMER2_IRQHandler
   Definitions
      At line 501 in file Source\startup_LPC17xx.s
   Uses
      At line 76 in file Source\startup_LPC17xx.s
      At line 465 in file Source\startup_LPC17xx.s

TIMER3_IRQHandler 000001B4

Symbol: TIMER3_IRQHandler
   Definitions
      At line 502 in file Source\startup_LPC17xx.s
   Uses
      At line 77 in file Source\startup_LPC17xx.s
      At line 466 in file Source\startup_LPC17xx.s

TopNeighbourCheck 00000132

Symbol: TopNeighbourCheck
   Definitions
      At line 356 in file Source\startup_LPC17xx.s
   Uses
      At line 334 in file Source\startup_LPC17xx.s
Comment: TopNeighbourCheck used once
UART0_IRQHandler 000001B4

Symbol: UART0_IRQHandler
   Definitions
      At line 503 in file Source\startup_LPC17xx.s
   Uses
      At line 78 in file Source\startup_LPC17xx.s
      At line 467 in file Source\startup_LPC17xx.s

UART1_IRQHandler 000001B4

Symbol: UART1_IRQHandler
   Definitions
      At line 504 in file Source\startup_LPC17xx.s
   Uses



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 79 in file Source\startup_LPC17xx.s
      At line 468 in file Source\startup_LPC17xx.s

UART2_IRQHandler 000001B4

Symbol: UART2_IRQHandler
   Definitions
      At line 505 in file Source\startup_LPC17xx.s
   Uses
      At line 80 in file Source\startup_LPC17xx.s
      At line 469 in file Source\startup_LPC17xx.s

UART3_IRQHandler 000001B4

Symbol: UART3_IRQHandler
   Definitions
      At line 506 in file Source\startup_LPC17xx.s
   Uses
      At line 81 in file Source\startup_LPC17xx.s
      At line 470 in file Source\startup_LPC17xx.s

USBActivity_IRQHandler 000001B4

Symbol: USBActivity_IRQHandler
   Definitions
      At line 531 in file Source\startup_LPC17xx.s
   Uses
      At line 106 in file Source\startup_LPC17xx.s
      At line 495 in file Source\startup_LPC17xx.s

USB_IRQHandler 000001B4

Symbol: USB_IRQHandler
   Definitions
      At line 522 in file Source\startup_LPC17xx.s
   Uses
      At line 97 in file Source\startup_LPC17xx.s
      At line 486 in file Source\startup_LPC17xx.s

Uppercase 000000D2

Symbol: Uppercase
   Definitions
      At line 281 in file Source\startup_LPC17xx.s
   Uses
      At line 204 in file Source\startup_LPC17xx.s
      At line 210 in file Source\startup_LPC17xx.s
      At line 216 in file Source\startup_LPC17xx.s
      At line 222 in file Source\startup_LPC17xx.s

UsageFault_Handler 000001AA

Symbol: UsageFault_Handler
   Definitions
      At line 438 in file Source\startup_LPC17xx.s
   Uses
      At line 61 in file Source\startup_LPC17xx.s
      At line 439 in file Source\startup_LPC17xx.s




ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

WDT_IRQHandler 000001B4

Symbol: WDT_IRQHandler
   Definitions
      At line 498 in file Source\startup_LPC17xx.s
   Uses
      At line 73 in file Source\startup_LPC17xx.s
      At line 462 in file Source\startup_LPC17xx.s

__user_initial_stackheap 000001B8

Symbol: __user_initial_stackheap
   Definitions
      At line 554 in file Source\startup_LPC17xx.s
   Uses
      At line 553 in file Source\startup_LPC17xx.s
Comment: __user_initial_stackheap used once
bot_end 00000184

Symbol: bot_end
   Definitions
      At line 396 in file Source\startup_LPC17xx.s
   Uses
      At line 389 in file Source\startup_LPC17xx.s
      At line 392 in file Source\startup_LPC17xx.s

exit_solver 0000012A

Symbol: exit_solver
   Definitions
      At line 348 in file Source\startup_LPC17xx.s
   Uses
      At line 322 in file Source\startup_LPC17xx.s
Comment: exit_solver used once
increment_counter 00000124

Symbol: increment_counter
   Definitions
      At line 344 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: increment_counter unused
left_end 000001A0

Symbol: left_end
   Definitions
      At line 411 in file Source\startup_LPC17xx.s
   Uses
      At line 404 in file Source\startup_LPC17xx.s
      At line 407 in file Source\startup_LPC17xx.s

main_loop 000000F6

Symbol: main_loop
   Definitions
      At line 320 in file Source\startup_LPC17xx.s
   Uses
      At line 346 in file Source\startup_LPC17xx.s
Comment: main_loop used once



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

mazeSolver 000000E6

Symbol: mazeSolver
   Definitions
      At line 302 in file Source\startup_LPC17xx.s
   Uses
      At line 303 in file Source\startup_LPC17xx.s
Comment: mazeSolver used once
phase_1_loop 00000104

Symbol: phase_1_loop
   Definitions
      At line 327 in file Source\startup_LPC17xx.s
   Uses
      At line 342 in file Source\startup_LPC17xx.s
Comment: phase_1_loop used once
phase_1_next_cell 0000011C

Symbol: phase_1_next_cell
   Definitions
      At line 339 in file Source\startup_LPC17xx.s
   Uses
      At line 331 in file Source\startup_LPC17xx.s
Comment: phase_1_next_cell used once
right_end 00000168

Symbol: right_end
   Definitions
      At line 381 in file Source\startup_LPC17xx.s
   Uses
      At line 374 in file Source\startup_LPC17xx.s
      At line 377 in file Source\startup_LPC17xx.s

stop 00000008

Symbol: stop
   Definitions
      At line 162 in file Source\startup_LPC17xx.s
   Uses
      At line 162 in file Source\startup_LPC17xx.s
Comment: stop used once
top_end 0000014C

Symbol: top_end
   Definitions
      At line 366 in file Source\startup_LPC17xx.s
   Uses
      At line 359 in file Source\startup_LPC17xx.s
      At line 362 in file Source\startup_LPC17xx.s

80 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap_Size 00000000

Symbol: Heap_Size
   Definitions
      At line 38 in file Source\startup_LPC17xx.s
   Uses
      At line 42 in file Source\startup_LPC17xx.s
      At line 558 in file Source\startup_LPC17xx.s

Stack_Size 00000400

Symbol: Stack_Size
   Definitions
      At line 27 in file Source\startup_LPC17xx.s
   Uses
      At line 30 in file Source\startup_LPC17xx.s
      At line 557 in file Source\startup_LPC17xx.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 140 in file Source\startup_LPC17xx.s
   Uses
      At line 142 in file Source\startup_LPC17xx.s
Comment: SystemInit used once
__main 00000000

Symbol: __main
   Definitions
      At line 141 in file Source\startup_LPC17xx.s
   Uses
      At line 144 in file Source\startup_LPC17xx.s
Comment: __main used once
__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 552 in file Source\startup_LPC17xx.s
   Uses
      None
Comment: __use_two_region_memory unused
3 symbols
438 symbols in table
